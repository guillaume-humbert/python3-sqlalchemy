Index: sqlalchemy-0.4.7p1/lib/sqlalchemy/orm/mapper.py
===================================================================
--- sqlalchemy-0.4.7p1.orig/lib/sqlalchemy/orm/mapper.py
+++ sqlalchemy-0.4.7p1/lib/sqlalchemy/orm/mapper.py
@@ -1583,7 +1583,7 @@ class Mapper(object):
             if leftcol.table not in needs_tables:
                 binary.left = sql.bindparam(None, None, type_=binary.right.type)
                 param_names.append((leftcol, binary.left))
-            elif rightcol not in needs_tables:
+            elif rightcol.table not in needs_tables:
                 binary.right = sql.bindparam(None, None, type_=binary.right.type)
                 param_names.append((rightcol, binary.right))
 
Index: sqlalchemy-0.4.7p1/lib/sqlalchemy/schema.py
===================================================================
--- sqlalchemy-0.4.7p1.orig/lib/sqlalchemy/schema.py
+++ sqlalchemy-0.4.7p1/lib/sqlalchemy/schema.py
@@ -214,7 +214,7 @@ class Table(SchemaItem, expression.Table
 
         self._set_parent(metadata)
 
-	self.__extra_kwargs(**kwargs)
+        self.__extra_kwargs(**kwargs)
 
         # load column definitions from the database if 'autoload' is defined
         # we do it after the table is in the singleton dictionary to support
@@ -1036,7 +1036,7 @@ class CheckConstraint(Constraint):
 
         super(CheckConstraint, self).__init__(name, deferrable, initially)
         if not isinstance(sqltext, basestring):
-            raise exc.ArgumentError(
+            raise exceptions.ArgumentError(
                 "sqltext must be a string and will be used verbatim.")
         self.sqltext = sqltext
 
